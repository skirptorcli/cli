project:
  name: Upload Thing Nextjs
  description: A simple Next.js project with Upload Thing integration

steps:
  - name: Ask for project name
    type: ask_user
    question: What is the name of your project?
    variable: project_name

  - name: Ask for Upload Thing secret key
    type: ask_user
    question: What is your Upload Thing secret key?
    variable: uploadthing_secret

  - name: Install packages
    type: run_command
    command: npm install uploadthing @uploadthing/react
    cwd: ./{{user_input_project_name}}

  - name: Create .env file
    type: create_file
    path: ./{{user_input_project_name}}/.env
    content: |
      UPLOADTHING_SECRET={{user_input_uploadthing_secret}}

  - name: Create app/api/uploadthing/core.ts
    type: create_file
    path: ./{{user_input_project_name}}/app/api/uploadthing/core.ts
    content: |
      import { createUploadthing, type FileRouter } from "uploadthing/next";
      import { UploadThingError } from "uploadthing/server";
      
      const f = createUploadthing();
      
      const auth = (req: Request) => ({ id: "fakeId" }); // Fake auth function
      
      // FileRouter for your app, can contain multiple FileRoutes
      export const ourFileRouter = {
        // Define as many FileRoutes as you like, each with a unique routeSlug
        imageUploader: f({ image: { maxFileSize: "4MB" } })
          // Set permissions and file types for this FileRoute
          .middleware(async ({ req }) => {
            // This code runs on your server before upload
            const user = await auth(req);
          
            // If you throw, the user will not be able to upload
            if (!user) throw new UploadThingError("Unauthorized");
          
            // Whatever is returned here is accessible in onUploadComplete as `metadata`
            return { userId: user.id };
          })
          .onUploadComplete(async ({ metadata, file }) => {
            // This code RUNS ON YOUR SERVER after upload
            console.log("Upload complete for userId:", metadata.userId);
          
            console.log("file url", file.url);
          
            // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback
            return { uploadedBy: metadata.userId };
          }),
      } satisfies FileRouter;
      
      export type OurFileRouter = typeof ourFileRouter;

  - name: Create app/api/uploadthing/route.ts
    type: create_file
    path: ./{{user_input_project_name}}/app/api/uploadthing/route.ts
    content: |
      import { createRouteHandler } from "uploadthing/next";
      
      import { ourFileRouter } from "./core";
      
      // Export routes for Next App Router
      export const { GET, POST } = createRouteHandler({
        router: ourFileRouter,
      
        // Apply an (optional) custom config:
        // config: { ... },
      });

  - name: Add UploadThing styles to tailwind.config.ts
    type: update_file
    path: ./{{user_input_project_name}}/tailwind.config.ts
    instructions: |
      Import the `withUt` helper from `uploadthing/tw` and wrap your existing Tailwind config with it.

  - name: Create src/utils/uploadthing.ts
    type: create_file
    path: ./{{user_input_project_name}}/src/utils/uploadthing.ts
    content: |
      import {
        generateUploadButton,
        generateUploadDropzone,
      } from "@uploadthing/react";
      
      import type { OurFileRouter } from "~/app/api/uploadthing/core";
      
      export const UploadButton = generateUploadButton<OurFileRouter>();
      export const UploadDropzone = generateUploadDropzone<OurFileRouter>();

  - name: Create app/example-uploader/page.tsx
    type: create_file
    path: ./{{user_input_project_name}}/app/example-uploader/page.tsx
    content: |
      "use client";
      
      import { UploadButton } from "~/utils/uploadthing";
      
      export default function Home() {
        return (
          <main className="flex min-h-screen flex-col items-center justify-between p-24">
            <UploadButton
              endpoint="imageUploader"
              onClientUploadComplete={(res) => {
                // Do something with the response
                console.log("Files: ", res);
                alert("Upload Completed");
              }}
              onUploadError={(error: Error) => {
                // Do something with the error.
                alert(`ERROR! ${error.message}`);
              }}
            />
          </main>
        );
      }

  - name: Add UploadThing SSR plugin to app/layout.tsx
    type: update_file
    path: ./{{user_input_project_name}}/app/layout.tsx
    instructions: |
      Import the `NextSSRPlugin` from `@uploadthing/react/next-ssr-plugin` and render it in the body of your root layout before the children.
